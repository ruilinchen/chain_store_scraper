import os
import json
import time
import random
import re
import math
import pandas as pd
import logging
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException, ElementNotInteractableException, WebDriverException, NoSuchElementException
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from lxml import html


### CONSTANTS 
STORE_INFO_FILE = 'data/store_locations.csv'
ZIP_CODE_FILE = 'data/zip_codes_in_the_world.csv'


def read_zip_codes():
    zip_df = pd.read_csv(ZIP_CODE_FILE)
    if 'scraped' not in zip_df.columns:
        zip_df['scraped'] = False
    zip_codes = list(set(zip_df['zip_code'][zip_df['scraped'] == False]))
    return zip_codes


def update_zip_code(target_zip_code):
    zip_df = pd.read_csv(ZIP_CODE_FILE)
    if 'scraped' not in zip_df.columns:
        zip_df['scraped'] = False
    zip_df.loc[zip_df['zip_code']==target_zip_code, 'scraped'] = True
    zip_df.to_csv(ZIP_CODE_FILE, index=False)
    print('updated zip code df')
    print('remaining zip codes to be scraped:', zip_df[zip_df['scraped']==False].shape[0])

def get_zip_code():
    if len(zip_code_list) == 0:
        print('looped through all the zip codes')
        return False
    zip_code = random.choice(zip_code_list)
    zip_code_list.remove(zip_code)
    return zip_code

def get_time():
    return time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())

def random_sleep():
    sleep_time = random.random() * 2
    time.sleep(sleep_time)


def extract_store_info(page_content):
    tree = html.fromstring(str(page_content))
    #print(tree)
    print('extracted page content')
    address_list = tree.xpath("//div[@class='rl-details']/h2/a/text()")
    url_list = tree.xpath("//div[@class='rl-details']/h2/a/@href")
    #print(len(address_list), address_list)
    #print(len(url_list), url_list)
    post_code_list = tree.xpath("//div[@class='rl-details']/div/span[contains(text(),', ')]/text()")
    #print(len(post_code_list), post_code_list)
    geo_info_list = tree.xpath("//div[@class='rl-details']/div/span[contains(text(),'miles')]/a[contains(@href, '://')]/@href")
    #print(len(geo_info_list), geo_info_list)
    raw_data = {'address': address_list, 'post_code': post_code_list, 'url': url_list, 'geo': geo_info_list}
    store_df = _process_store_info(raw_data)
    return store_df

def check_exists_by_xpath(driver, xpath):
    try:
        driver.find_element_by_xpath(xpath)
    except NoSuchElementException:
        return False
    ### obscures it;
    reject_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='No thanks']")))
    actions = ActionChains(driver)
    actions.move_to_element(reject_button)
    actions.click(reject_button)
    driver.execute_script()
    actions.perform()
    return True


def _process_store_info(raw_dict):
    address_list = raw_dict['address']
    url_list = raw_dict['url']
    geo_info_list = raw_dict['geo']
    post_code_list = raw_dict['post_code']

    new_address_list = [address.strip() for address in address_list]
    new_url_list = ['https://www.mcdonalds.com/'+url for url in url_list]
    latitude_list = [geo.split('&')[1].split('=')[1].split(',')[0] for geo in geo_info_list]
    longitude_list = [geo.split('&')[1].split('=')[1].split(',')[1] for geo in geo_info_list]
    new_post_code_list = [post_code.split(' ')[-1] for post_code in post_code_list]
    city_list = [post_code.split(' ')[0].strip().strip(',') for post_code in post_code_list]
    state_list = [post_code.split(' ')[1].strip() for post_code in post_code_list]
    tmp_df = pd.DataFrame(columns = ['address', 'post_code', 'state', 'city', 'url', 'latitude', 'longitude'])
    tmp_df['address'] = new_address_list
    tmp_df['post_code'] = new_post_code_list
    tmp_df['url'] = new_url_list
    tmp_df['latitude'] = latitude_list
    tmp_df['longitude'] = longitude_list
    tmp_df['state'] = state_list
    tmp_df['city'] = city_list
    print('collected store df with shape', tmp_df.shape)
    return tmp_df

zip_code_list = read_zip_codes()

logging.basicConfig(filename='crawler.log',level=logging.INFO)
logging.info('[begin] Started a new round of scraping.')
logging.info(get_time())

TODAY = datetime.today().strftime("%m%d%Y")

driver = webdriver.Firefox()
while True:
    random_sleep()
    target_zip_code = get_zip_code()
    print('search zip code: {}'.format(target_zip_code))
    if target_zip_code == False:
        break
    locator_url = 'https://www.mcdonalds.com/us/en-us/restaurant-locator.html'
    driver.get(locator_url)
    survey_xpath = "//div[@id='fsrInvite']"
    check_exists_by_xpath(driver, survey_xpath)
    zip_code_element = WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_xpath("//input[@id='search']"))
    zip_code_element.send_keys(target_zip_code)
    search_button = driver.find_element_by_xpath("//button[@type='submit']")
    search_button.click()
    check_exists_by_xpath(driver, survey_xpath)
    list_view_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[@ng-click='toggleListMapView()']")))
    list_view_button.click()
    check_exists_by_xpath(driver, survey_xpath)
    count_element = driver.find_element_by_xpath("//div[@class='mcd-rlresults__filters__heading ng-binding']")
    store_count_list = re.findall(r'\d+', count_element.text)
    store_count = list(map(int, store_count_list))[0]
    print('this search found {} stores'.format(store_count))
    click_count = math.ceil(float(max(store_count-5.0, 0)) / 5.0)
    if click_count > 0:
        for _ in range(click_count):
            load_more_flag = driver.find_element_by_xpath("//button[@ng-click='toggleTotalVisibleRestaurants()']")
            print('click to load more')
            if load_more_flag:
                random_sleep()
                actions = ActionChains(driver)
                #menu_element = driver.find_element_by_xpath("//p[@id='alert-box-message']")
                #actions.move_to_element(menu_element)
                load_more_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[@ng-click='toggleTotalVisibleRestaurants()']")))
                actions.move_to_element(load_more_button)
                actions.click(load_more_button)
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                actions.perform()
                random_sleep()
            else:
                break
    print("successful!!!!")
    check_exists_by_xpath(driver, survey_xpath)
    store_df = extract_store_info(driver.page_source)
    if os.path.exists(STORE_INFO_FILE):
        previous_df = pd.read_csv(STORE_INFO_FILE)
        df = pd.concat([previous_df, store_df])
        df.to_csv(STORE_INFO_FILE, index=False)
        print('saved df to file with shape:', df.shape)
    else:
        store_df.to_csv(STORE_INFO_FILE, index=False)
        print('saved df to file with shape:', store_df.shape)

    update_zip_code(target_zip_code)
